# Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
#
# WSO2 LLC. licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License
################################################################################
openapi: 3.0.1
info:
  version: v0.1
  title: WSO2 API Manager - Governance
  description: |
    This document specifies a **RESTful API** for WSO2 **API Manager** - Governance.
  contact:
    name: WSO2
    url: http://wso2.com/products/api-manager/
    email: architecture@wso2.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://apis.wso2.com/api/am/governance/v0
tags:
  - name: Rulesets
    description: for managing rulesets.
  - name: Governance Policies
    description: for managing governance policies.
  - name: Governance Evaluation
    description: for evaluating governance compliance.
  - name: Governance Results
    description: for accessing governance results.
  - name: Health Check
    description: for health check.
  - name: Deprecated
    description: resources that are deprecated.
paths:
  /rulesets:
    get:
      summary: Retrieves a list of rulesets.
      description: Returns a list of all rulesets associated with the requested organization.
      operationId: getRulesets
      tags:
        - Rulesets
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        "200":
          description: OK. Successful response with a list of rulesets.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulesetList'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_rule_read
    post:
      summary: Create a new ruleset.
      description: Creates a new ruleset in the user's organization.
      operationId: createRuleset
      tags:
        - Rulesets
      requestBody:
        required: true
        description: JSON object containing the details of the new ruleset.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RulesetInput'
      responses:
        "201":
          description: OK. Ruleset created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulesetInfo'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_rule_manage
  /rulesets/{rulesetId}:
    get:
      summary: Retrieves details of a specific ruleset.
      description: Retrieves details of the ruleset identified by the rulesetId.
      operationId: getRulesetById
      tags:
        - Rulesets
      parameters:
        - $ref: '#/components/parameters/rulesetId'
      responses:
        "200":
          description: OK. Ruleset details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulesetInfo'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_rule_read
    put:
      summary: Updates a specific ruleset.
      description: Updates the details of the ruleset identified by the `rulesetId`.
      operationId: updateRulesetById
      tags:
        - Rulesets
      parameters:
        - $ref: '#/components/parameters/rulesetId'
      requestBody:
        required: true
        description: JSON object containing the updated ruleset details.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RulesetInput'
      responses:
        "200":
          description: OK. Ruleset updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulesetInfo'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_rule_manage
    delete:
      summary: Deletes a specific ruleset.
      description: Deletes an existing ruleset identified by the rulesetId.
      operationId: deleteRuleset
      tags:
        - Rulesets
      parameters:
        - $ref: '#/components/parameters/rulesetId'
      responses:
        '204':
          description: OK. Ruleset deleted successfully.
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_rule_manage
  /rulesets/{rulesetId}/content:
    get:
      summary: Retrieves the content of a specific ruleset.
      description: Retrieves the content of the ruleset identified by the rulesetId.
      operationId: getRulesetContent
      tags:
        - Rulesets
      parameters:
        - $ref: '#/components/parameters/rulesetId'
      responses:
        "200":
          description: OK. Ruleset content retrieved successfully.
          content:
            application/x-yaml:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_rule_read
  /rulesets/{rulesetId}/usage:
    get:
      summary: Retrieves the policy usage of a specific ruleset.
      description: Retrieves the list of policies using the ruleset identified by the rulesetId.
      operationId: getRulesetUsage
      tags:
        - Rulesets
      parameters:
        - $ref: '#/components/parameters/rulesetId'
      responses:
        "200":
          description: OK. Ruleset usage retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                description: List of artifacts using the ruleset.
                items:
                  type: string
                  example: "123e4567-e89b-12d3-a456-426614174000"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_rule_read
  /healthz/liveness:
    get:
      summary: Liveness Check
      description: Checks if the application is alive and able to respond to requests.
      operationId: getHealthzLiveness
      tags:
        - Health Check
        - Internal
      responses:
        "200":
          description: Application is alive
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthzResponse"
  /healthz/readiness:
    get:
      summary: Readiness Check
      description: Checks if the application is ready to handle requests.
      operationId: getHealthzReadiness
      tags:
        - Health Check
        - Internal
      responses:
        "200":
          description: Application is ready
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthzResponse"
  /governance-policies:
    get:
      summary: Retrieves a list of all governance policies.
      description: Retrieves a list of governance policies for the user's organization.
      operationId: getGovernancePolicies
      tags:
        - Governance Policies
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        "200":
          description: OK. Successful response with a list of governance policies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GovernancePolicyList'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_policy_read
    post:
      summary: Creates a new governance policy.
      description: Creates a new governance policy for the user's organization.
      operationId: createGovernancePolicy
      tags:
        - Governance Policies
      requestBody:
        required: true
        description: JSON object containing the details of the new governance policy.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GovernancePolicy'
      responses:
        "201":
          description: OK. Governance policy created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GovernancePolicy'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_policy_manage
  /governance-policies/{policyId}:
    get:
      summary: Get a specific governance policy
      description: Retrieves details of a specific governance policy identified by the policyId.
      operationId: getGovernancePolicyById
      tags:
        - Governance Policies
      parameters:
        - $ref: '#/components/parameters/policyId'
      responses:
        "200":
          description: OK. Governance policy details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GovernancePolicy'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_policy_read
    put:
      summary: Update a specific governance policy
      description: Updates the details of an existing governance policy identified by the policyId.
      operationId: updateGovernancePolicyById
      tags:
        - Governance Policies
      parameters:
        - $ref: '#/components/parameters/policyId'
      requestBody:
        required: true
        description: JSON object containing the updated governance policy details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GovernancePolicy'
      responses:
        "200":
          description: OK. Governance policy updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GovernancePolicy'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_policy_manage
    delete:
      summary: Delete a specific governance policy
      description: Deletes an existing governance policy identified by the policyId.
      operationId: deleteGovernancePolicy
      tags:
        - Governance Policies
      parameters:
        - $ref: '#/components/parameters/policyId'
      responses:
        '204':
          description: OK. Governance policy deleted successfully.
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_policy_manage
  /evaluate-compliance:
    post:
      summary: Evaluate governance compliance
      description: Evaluates the compliance of an artifact with the governance policies of the organization.
      operationId: evaluateCompliance
      tags:
        - Governance Evaluation
      requestBody:
        required: true
        description: JSON object containing the details of the artifact to be checked.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GovernanceEvaluationRequest'
      responses:
        "200":
          description: OK. Governance check successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactGovernanceResult'
        "204":
          description: No Content. No governance check triggered in the background.
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_evaluate_compliance
  /artifact-governance-results:
    get:
      summary: Retrieves governance results of all artifacts
      description: Retrieves governance results of all artifacts in the organization.
      operationId: getGovernanceResultsForAllArtifacts
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      tags:
        - Governance Results
      responses:
        "200":
          description: OK. Successful response with governance results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactGovernanceResults'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_result_read
  /artifact-governance-results/{artifactId}:
    get:
      summary: Retrieve governance results for a specific artifact
      description: Retrieve governance results associated with a specific artifact including APIs within the organization using its unique ID.
      operationId: getGovernanceResultsByArtifactId
      tags:
        - Governance Results
      parameters:
        - $ref: '#/components/parameters/artifactId'
      responses:
        "200":
          description: Successful response with governance results for the specified artifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactGovernanceResult'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_result_read
  /policy-governance-results:
    get:
      summary: Retrieve governance results for all policies
      description: Retrieve governance results of all governance policies within the organization.
      operationId: getGovernanceResultsForAllPolicies
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      tags:
        - Governance Results
      responses:
        "200":
          description: Successful response with governance results for the specified policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyGovernanceResults'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_result_read
  /policy-governance-results/{policyId}:
    get:
      summary: Retrieve governance results for a specific policy
      description: Retrieve governance results associated with a specific governance policy within the organization using its unique ID.
      operationId: getGovernanceResultsByPolicyId
      tags:
        - Governance Results
      parameters:
        - $ref: '#/components/parameters/policyId'
      responses:
        "200":
          description: Successful response with governance results for the specified policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyGovernanceResult'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_result_read

components:
  schemas:
    Pagination:
      title: Pagination
      type: object
      properties:
        offset:
          type: integer
          example: 0
        limit:
          type: integer
          example: 1
        total:
          type: integer
          example: 10
        next:
          type: string
          description: |
            Link to the next subset of resources qualified.
            Empty if no more resources are to be returned.
        previous:
          type: string
          description: |
            Link to the previous subset of resources qualified.
            Empty if current subset is the first subset returned.
    Error:
      title: Error object returned with 4XX HTTP Status
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int64
        message:
          type: string
          description: Error message.
        description:
          type: string
          description: |
            A detail description about the error message.
    HealthzResponse:
      type: object
      properties:
        status:
          type: string
          example: Ok
    RulesetList:
      type: object
      description: A list of rulesets.
      properties:
        count:
          type: integer
          description: Number of rulesets returned.
          example: 2
        list:
          type: array
          description: List of rulesets.
          items:
            $ref: '#/components/schemas/RulesetInfo'
        pagination:
          $ref: '#/components/schemas/Pagination'
    RulesetInput:
      type: object
      description: Detailed information about a ruleset.
      properties:
        name:
          type: string
          description: Name of the ruleset.
          example: "API Security Ruleset"
        description:
          type: string
          description: A brief description of the ruleset.
          example: "A ruleset designed to enforce security standards for APIs."
        rulesetContent:
          type: string
          description: The content of the ruleset file (YAML or JSON).
          format: binary
          example: |
            rules:
              oas2-always-use-https:
                given:
                  - '$.schemes[*]'
                severity: error
                then:
                  function: enumeration
                  functionOptions:
                    values:
                      - https
                description: >-
                  Host schemes must use the HTTPS protocol. Applies to: OpenAPI 2.0`
                message: API host schemes must use the HTTPS protocol.
                formats:
                  - oas2
        ruleType:
          type: string
          description: Context or area to which the ruleset applies.
          enum:
            - API_METADATA
            - API_DEFINITION
            - API_DOCUMENTATION
          example: API_DEFINITION
          x-enum-varnames:
            - API_METADATA
            - API_DEFINITION
            - API_DOCUMENTATION
        artifactType:
          type: string
          description: The type of artifact that the ruleset validates.
          enum:
            - REST_API
            - SOAP_API
            - GRAPHQL_API
            - ASYNC_API
            - ALL_API
          example: REST_API
        documentationLink:
          type: string
          description: URL to the documentation related to the ruleset.
          example: "https://example.com/docs/api-security-ruleset"
        provider:
          type: string
          description: Entity or individual providing the ruleset.
          example: "TechWave"
      required:
        - name
        - rulesetContent
        - ruleType
        - artifactType
        - provider
    RulesetInfo:
      type: object
      description: Detailed information about a ruleset.
      properties:
        id:
          type: string
          description: UUID of the ruleset.
          readOnly: true
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Name of the ruleset.
          example: "API Security Ruleset"
        description:
          type: string
          description: A brief description of the ruleset.
          example: "A ruleset designed to enforce security standards for APIs."
        ruleType:
          type: string
          description: Context or area to which the ruleset applies.
          enum:
            - API_METADATA
            - API_DEFINITION
            - API_DOCUMENTATION
          example: API_DEFINITION
          x-enum-varnames:
            - API_METADATA
            - API_DEFINITION
            - API_DOCUMENTATION
        artifactType:
          type: string
          description: The type of artifact that the ruleset validates.
          enum:
            - REST_API
            - SOAP_API
            - GRAPHQL_API
            - ASYNC_API
            - ALL_API
          example: REST_API
        documentationLink:
          type: string
          description: URL to the documentation related to the ruleset.
          example: "https://example.com/docs/api-security-ruleset"
        provider:
          type: string
          description: Entity or individual providing the ruleset.
          example: "TechWave"
        createdBy:
          type: string
          description: Identifier of the user who created the ruleset.
          readOnly: true
          example: "admin@gmail.com"
        createdTime:
          type: string
          description: Timestamp when the ruleset was created.
          readOnly: true
          example: "2024-08-01T12:00:00Z"
        updatedBy:
          type: string
          description: Identifier of the user who last updated the ruleset.
          readOnly: true
          example: "admin@gmail.com"
        updatedTime:
          type: string
          description: Timestamp when the ruleset was last updated.
          readOnly: true
          example: "2024-08-02T12:00:00Z"
      required:
        - name
        - ruleType
        - artifactType
        - provider
    GovernancePolicy:
      type: object
      description: Detailed information about a governance policy.
      properties:
        id:
          type: string
          description: UUID of the governance policy.
          readOnly: true
          example: "987e6543-d21b-34d5-b678-912345678900"
        name:
          type: string
          description: Name of the governance policy.
          example: "API Security Policy"
        description:
          type: string
          description: A brief description of the governance policy.
          example: "Policy for enforcing security standards across all APIs."
        governableStates:
          type: array
          description: List of states at which the governance policy should be enforced.
          items:
            type: string
            description: The state at which an governance policy should be enforced.
            enum:
              - API_CREATE
              - API_UPDATE
              - API_DEPLOY
              - API_PUBLISH
            example: "API_DEPLOY"
            x-enum-varnames:
              - API_CREATE
              - API_UPDATE
              - API_DEPLOY
              - API_PUBLISH
        actions:
          type: array
          description: List of actions taken when the governance policy is violated.
          items:
            $ref: '#/components/schemas/Action'
        rulesets:
          type: array
          description: List of rulesets associated with the governance policy.
          items:
            type: string
            example: "94566543-d21b-34d5-b678-912345678900"
        labels:
          type: array
          description: Labels associated with the governance policy.
          items:
            type: string
          example:
            - "healthcare"
        createdBy:
          type: string
          description: Identifier of the user who created the governance policy.
          readOnly: true
          example: "admin@wso2.com"
        createdTime:
          type: string
          description: Timestamp when the governance policy was created.
          readOnly: true
          example: "2024-08-01T12:00:00Z"
        updatedBy:
          type: string
          description: Identifier of the user who last updated the governance policy.
          readOnly: true
          example: "admin@wso2.com"
        updatedTime:
          type: string
          description: Timestamp when the governance policy was last updated.
          readOnly: true
          example: "2024-08-02T12:00:00Z"
      required:
        - name
        - rulesets
        - labels
        - governableStates
        - actions
    Action:
      type: object
      description: Action to be taken when a governance policy is violated.
      properties:
        state:
          type: string
          description: The state of the artifact to which the action is linked to.
          enum:
            - API_CREATE
            - API_UPDATE
            - API_DEPLOY
            - API_PUBLISH
          example: "API_DEPLOY"
          x-enum-varnames:
            - API_CREATE
            - API_UPDATE
            - API_DEPLOY
            - API_PUBLISH
        ruleSeverity:
          type: string
          description: The severity of the rule to which the action is linked to.
          enum:
            - ERROR
            - WARN
            - INFO
          example: "ERROR"
        type:
          type: string
          description: The type of action to be taken when a governance policy is violated in the given state withe given rule severity.
          enum:
            - BLOCK
            - NOTIFY
          example: "BLOCK"
    GovernancePolicyList:
      type: object
      description: A list of governance policies.
      properties:
        count:
          type: integer
          description: Number of governance policies returned.
          example: 10
        list:
          type: array
          description: List of governance policies.
          items:
            $ref: '#/components/schemas/GovernancePolicy'
        pagination:
          $ref: '#/components/schemas/Pagination'
    ArtifactGovernanceResultList:
      type: object
      description: A list of artifact governance results.
      properties:
        count:
          type: integer
          description: Number of artifact governance results returned.
          example: 10
        list:
          type: array
          description: List of artifact governance results.
          items:
            $ref: '#/components/schemas/ArtifactGovernanceResultInfo'
        pagination:
          $ref: '#/components/schemas/Pagination'
    ArtifactGovernanceResults:
      type: object
      description: Governance results of all artifacts of an organization.
      properties:
        summary:
          $ref: '#/components/schemas/GovernanceSummaryForArtifacts'
        results:
          $ref: '#/components/schemas/ArtifactGovernanceResultList'
    PolicyGovernanceResultList:
      type: object
      description: A list of policy governance results.
      properties:
        count:
          type: integer
          description: Number of policy governance results returned.
          example: 10
        list:
          type: array
          description: List of policy governance results.
          items:
            $ref: '#/components/schemas/PolicyGovernanceResultInfo'
        pagination:
          $ref: '#/components/schemas/Pagination'
    PolicyGovernanceResults:
      type: object
      description: Governance results of all policies of an organization.
      properties:
        summary:
          $ref: '#/components/schemas/GovernanceSummaryForPolicies'
        results:
          $ref: '#/components/schemas/PolicyGovernanceResultList'
    GovernanceSummaryForPolicies:
      type: object
      description: Summary of governance policy compliance.
      properties:
        total:
          type: integer
          description: Total number of policies.
          example: 10
        followed:
          type: integer
          description: Number of policies followed to.
          example: 6
        violated:
          type: integer
          description: Number of policies violated.
          example: 4
        unapplied:
          type: integer
          description: Number of policies unapplied.
          example: 0
    GovernanceSummaryForArtifacts:
      type: object
      description: Summary of artifact compliance status.
      properties:
        total:
          type: integer
          description: Total number of artifacts.
          example: 10
        compliant:
          type: integer
          description: Number of compliant artifacts.
          example: 6
        nonCompliant:
          type: integer
          description: Number of non-compliant artifacts.
          example: 4
        notApplicable:
          type: integer
          description: Number of artifacts not applicable.
          example: 0
    ArtifactGovernanceResultInfo:
      type: object
      description: Provides governance results of an artifact.
      properties:
        artifactId:
          type: string
          description: UUID of the artifact.
          example: "123e4567-e89b-12d3-a456-426614174000"
        artifactName:
          type: string
          description: Name of the artifact.
          example: "API1"
        status:
          type: string
          description: Status of the artifact's governance compliance.
          enum:
            - COMPLAINT
            - NON-COMPLAINT
            - NOT-APPLICABLE
          example: "COMPLAINT"
    PolicyGovernanceResultInfo:
      type: object
      description: Provides governance results of a policy.
      properties:
        policyId:
          type: string
          description: UUID of the policy.
          example: "123e4567-e89b-12d3-a456-426614174000"
        policyName:
          type: string
          description: Name of the policy.
          example: "Policy1"
        status:
          type: string
          description: Status of the policy's governance compliance.
          enum:
            - FOLLOWED
            - VIOLATED
            - UNAPPLIED
          example: "FOLLOWED"
    ArtifactGovernanceResult:
      type: object
      description: Provides governance results of an artifact.
      properties:
        artifactId:
          type: string
          description: UUID of the artifact.
          example: "123e4567-e89b-12d3-a456-426614174000"
        artifactName:
          type: string
          description: Name of the artifact.
          example: "API1"
        status:
          type: string
          description: Status of the artifact's governance compliance.
          enum:
            - COMPLAINT
            - NON-COMPLAINT
            - NOT-APPLICABLE
          example: "COMPLAINT"
        rulesetValidationResults:
          type: array
          description: List of rule validation information.
          items:
            $ref: '#/components/schemas/RulesetValidationResult'
    PolicyGovernanceResult:
      type: object
      description: Provides governance results of a policy.
      properties:
        policyId:
          type: string
          description: UUID of the policy.
          example: "123e4567-e89b-12d3-a456-426614174000"
        policyName:
          type: string
          description: Name of the policy.
          example: "Policy1"
        status:
          type: string
          description: Status of the policy's governance compliance.
          enum:
            - FOLLOWED
            - VIOLATED
            - UNAPPLIED
          example: "FOLLOWED"
        governedArtifacts:
          type: array
          description: Governance results of the artifacts attached to the policy.
          items:
            type: object
            properties:
              artifactId:
                type: string
                description: UUID of the artifact.
                example: "123e4567-e89b-12d3-a456-426614174000"
              artifactName:
                type: string
                description: Name of the artifact.
                example: "API1"
              status:
                type: string
                description: Status of the artifact's governance compliance.
                enum:
                  - COMPLAINT
                  - NON-COMPLAINT
                  - NOT-APPLICABLE
                example: "COMPLAINT"
    RulesetValidationResult:
      type: object
      description: Result of the ruleset validation.
      properties:
        id:
          type: string
          description: UUID of the ruleset.
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Name of the ruleset.
          example: "API Security Ruleset"
        status:
          type: string
          description: Status of the ruleset validation.
          enum:
            - PASSED
            - FAILED
          example: "PASSED"
        failedRules:
          type: array
          description: List of rule validation information.
          items:
            $ref: '#/components/schemas/RuleValidationResult'
        passedRules:
          type: array
          description: List of rule validation information.
          items:
            $ref: '#/components/schemas/RuleValidationResult'
    RuleValidationResult:
      type: object
      description: Result of the rule validation.
      properties:
        id:
          type: string
          description: UUID of the rule.
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Name of the rule.
          example: "API Name Rule"
        status:
          type: string
          description: Status of the rule validation.
          enum:
            - PASSED
            - FAILED
          example: "FAILED"
        severity:
          type: string
          description: Severity level of the rule violation.
          enum:
            - ERROR
            - WARN
            - INFO
          example: WARN
        violatedPaths:
          type: array
          description: List of paths that violate the rule.
          items:
            type: string
            example: "$.info.title"
        message:
          type: string
          description: Message to be displayed when the rule is violated.
          example: "API name can not be too long or short"
    GovernanceEvaluationRequest:
      type: object
      description: Request object for governance compliance validation.
      properties:
        artifactId:
          type: string
          description: UUID of the artifact.
          example: "123e4567-e89b-12d3-a456-426614174000"
        artifactType:
          type: string
          description: Type of the artifact.
          enum:
            - REST_API
            - SOAP_API
            - GRAPHQL_API
            - ASYNC_API
          example: REST_API
        artifactZip:
          type: string
          description: The zip of the artifact project.
          format: binary
        governableState:
          type: string
          description: The state of the artifact at which the evaluation should run
          enum:
            - API_CREATE
            - API_UPDATE
            - API_DEPLOY
            - API_PUBLISH
          example: API_DEPLOY
          x-enum-varnames:
            - API_CREATE
            - API_UPDATE
            - API_DEPLOY
            - API_PUBLISH
      required:
        - artifactId
        - artifactType
        - governableState
  #####
  # TODO: Fix scope validation logic. Currently scope validation is broken due to logic in apimgt.rest.api.common.RestAPICommonUtil
  #####
  securitySchemes:
    OAuth2Security:
      type: oauth2
      flows:
        password:
          tokenUrl: https://localhost:9443/oauth2/token
          scopes:
            openid: Authorize access to user details
            apim:gov_rule_read: Read governance rulesets
            apim:gov_rule_manage: Manage governance rulesets
            apim:gov_policy_read: Read governance policies
            apim:gov_policy_manage: Manage governance policies
            apim:gov_evaluate_compliance: Evaluate governance compliance
            apim:gov_result_read: Read governance results
  parameters:
    artifactId:
      name: artifactId
      in: path
      description: |
        **UUID** of the Artifact.
      required: true
      schema:
        type: string
    rulesetId:
      name: rulesetId
      in: path
      description: |
        **UUID** of the Ruleset.
      required: true
      schema:
        type: string
    policyId:
      name: policyId
      in: path
      description: |
        **UUID** of the Policy.
      required: true
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: |
        Maximum size of resource array to return.
      schema:
        type: integer
        default: 25
    offset:
      name: offset
      in: query
      description: |
        Starting point within the complete list of items qualified.
      schema:
        type: integer
        default: 0