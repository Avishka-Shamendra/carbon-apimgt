# Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
#
# WSO2 LLC. licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License
################################################################################
openapi: 3.0.1
info:
  version: v0.1
  title: WSO2 API Manager - Governance
  description: |
    This document specifies a **RESTful API** for WSO2 **API Manager** - Governance.
  contact:
    name: WSO2
    url: http://wso2.com/products/api-manager/
    email: architecture@wso2.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://apis.wso2.com/api/am/governance/v0
tags:
  - name: Rulesets
    description: API for managing rulesets.
  - name: Governance Policies
    description: API for managing governance policies.
  - name: Compliance Assessment
    description: API for accessing compliance details.
  - name: Compliance Details
    description: API for managing compliance details.
  - name: Adherence Details
    description: API for accessing adherence details.
  - name: Organization Level Dashboard
    description: API for organization level dashboard.
  - name: Component Level Dashboard
    description: API for component level dashboard.
  - name: Health Check
    description: API for health check.
  - name: External
    description: API resources that are exposed to the external world via gateway.
  - name: Internal
    description: API resources that are not exposed to the external world.
  - name: Deprecated
    description: API resources that are deprecated.
paths:
  /rulesets:
    get:
      summary: Retrieves a list of rulesets.
      description: Returns a list of all rulesets associated with the requested organization.
      operationId: getRulesets
      tags:
        - Rulesets
        - External
      responses:
        "200":
          description: OK. Successful response with a list of rulesets.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulesetList'
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_rule_read
    post:
      summary: Create a new ruleset.
      description: Creates a new ruleset in the user's organization.
      operationId: createRuleset
      tags:
        - Rulesets
        - External
      requestBody:
        required: true
        description: JSON object containing the details of the new ruleset.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ruleset'
      responses:
        "201":
          description: OK. Ruleset created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ruleset'
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_rule_manage
  /rulesets/{rulesetId}:
    get:
      summary: Retrieves details of a specific ruleset.
      description: Retrieves details of the ruleset identified by the rulesetId.
      operationId: getRulesetById
      tags:
        - Rulesets
        - External
      parameters:
        - name: rulesetId
          in: path
          required: true
          description: UUID of the ruleset.
          schema:
            type: string
      responses:
        "200":
          description: OK. Ruleset details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulesetInfo'
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_rule_read
    put:
      summary: Updates a specific ruleset.
      description: Updates the details of the ruleset identified by the `rulesetId`.
      operationId: updateRulesetById
      tags:
        - Rulesets
        - External
      parameters:
        - name: rulesetId
          in: path
          required: true
          description: UUID of the ruleset.
          schema:
            type: string
      requestBody:
        required: true
        description: JSON object containing the updated ruleset details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ruleset'
      responses:
        "200":
          description: OK. Ruleset updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ruleset'
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_rule_manage
    delete:
      summary: Deletes a specific ruleset.
      description: Deletes an existing ruleset identified by the rulesetId.
      operationId: deleteRuleset
      tags:
        - Rulesets
        - External
      parameters:
        - name: rulesetId
          in: path
          required: true
          description: UUID of the ruleset.
          schema:
            type: string
      responses:
        '204':
          description: OK. Ruleset deleted successfully.
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_rule_manage
  /rulesets/{rulesetId}/content:
    get:
      summary: Retrieves the content of a specific ruleset.
      description: Retrieves the content of the ruleset identified by the rulesetId.
      operationId: getRulesetContent
      tags:
        - Rulesets
        - External
      parameters:
        - name: rulesetId
          in: path
          required: true
          description: UUID of the ruleset.
          schema:
            type: string
      responses:
        "200":
          description: OK. Ruleset content retrieved successfully.
          content:
            application/x-yaml:
              schema:
                type: string
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_rule_read
  /healthz/liveness:
    get:
      summary: Liveness Check
      description: Checks if the application is alive and able to respond to requests.
      operationId: getHealthzLiveness
      tags:
        - Health Check
        - Internal
      responses:
        "200":
          description: Application is alive
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthzResponse"
  /healthz/readiness:
    get:
      summary: Readiness Check
      description: Checks if the application is ready to handle requests.
      operationId: getHealthzReadiness
      tags:
        - Health Check
        - Internal
      responses:
        "200":
          description: Application is ready
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthzResponse"
  /governance-policies:
    get:
      summary: Retrieves a list of all governance policies.
      description: Retrieves a list of governance policies for the user's organization.
      operationId: getGovernancePolicies
      tags:
        - Governance Policies
        - External
      responses:
        "200":
          description: OK. Successful response with a list of governance policies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GovernancePolicyList'
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_policy_read
    post:
      summary: Creates a new governance policy.
      description: Creates a new governance policy for the user's organization.
      operationId: createGovernancePolicy
      tags:
        - Governance Policies
        - External
      requestBody:
        required: true
        description: JSON object containing the details of the new governance policy.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GovernancePolicyInfoWithRulesetIds'
      responses:
        "201":
          description: OK. Governance policy created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GovernancePolicyInfo'
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_policy_manage
  /governance-policies/{policyId}:
    get:
      summary: Get a specific governance policy
      description: Retrieves details of a specific governance policy identified by the policyId.
      operationId: getGovernancePolicyById
      tags:
        - Governance Policies
        - External
      parameters:
        - name: policyId
          in: path
          required: true
          description: UUID of the governance policy.
          schema:
            type: string
      responses:
        "200":
          description: OK. Governance policy details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GovernancePolicyInfo'
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_policy_read
    put:
      summary: Update a specific governance policy
      description: Updates the details of an existing governance policy identified by the policyId.
      operationId: updateGovernancePolicyById
      tags:
        - Governance Policies
        - External
      parameters:
        - name: policyId
          in: path
          required: true
          description: UUID of the governance policy.
          schema:
            type: string
      requestBody:
        required: true
        description: JSON object containing the updated governance policy details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GovernancePolicyInfoWithRulesetIds'
      responses:
        "200":
          description: OK. Governance policy updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GovernancePolicyInfo'
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_policy_manage
    delete:
      summary: Delete a specific governance policy
      description: Deletes an existing governance policy identified by the policyId.
      operationId: deleteGovernancePolicy
      tags:
        - Governance Policies
        - External
      parameters:
        - name: policyId
          in: path
          required: true
          description: UUID of the governance policy.
          schema:
            type: string
      responses:
        '204':
          description: OK. Governance policy deleted successfully.
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_policy_manage
  /assess-compliance/api/{apiId}:
    post:
      summary: Assesses governance policy compliance for a specific api.
      description: Initiates a compliance assessment for the specified api within the user's organization.
      operationId: assessAPICompliance
      tags:
        - Compliance Assessment
        - Internal
      parameters:
        - name: apiId
          in: path
          required: true
          description: UUID of the api.
          schema:
            type: string
        - name: organization
          in: query
          required: true
          description: Name of the organization.
          schema:
            type: string
      requestBody:
        required: true
        description: Labels associated with the api.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessAPIComplianceRequest'
      responses:
        "202":
          description: Accepted. Assessment initiated successfully.
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_compliance_manage
    delete:
      summary: Delete a specific api.
      description: Delete a specified api within the user's organization.
      operationId: deleteAPI
      tags:
        - Compliance Assessment
        - Internal
      parameters:
        - name: apiId
          in: path
          required: true
          description: UUID of the api.
          schema:
            type: string
        - name: organization
          in: query
          required: true
          description: Name of the organization.
          schema:
            type: string
      responses:
        "204":
          description: OK. API deleted successfully.
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_compliance_manage

components:
  schemas:
    RulesetList:
      type: object
      description: A list of rulesets.
      properties:
        count:
          type: integer
          description: Number of rulesets returned.
          example: 2
        list:
          type: array
          description: List of rulesets.
          items:
            $ref: '#/components/schemas/RulesetInfo'
    Ruleset:
      type: object
      description: Detailed information about a ruleset.
      properties:
        id:
          type: string
          description: UUID of the ruleset.
          readOnly: true
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Name of the ruleset.
          example: "API Security Ruleset"
        description:
          type: string
          description: A brief description of the ruleset.
          example: "A ruleset designed to enforce security standards for APIs."
        rulesetContent:
          type: string
          description: The content of the ruleset file (YAML or JSON).
          example: |
            rules:
              oas2-always-use-https:
                given:
                  - '$.schemes[*]'
                severity: error
                then:
                  function: enumeration
                  functionOptions:
                    values:
                      - https
                description: >-
                  Host schemes must use the HTTPS protocol. Applies to: OpenAPI 2.0`
                message: API host schemes must use the HTTPS protocol.
                formats:
                  - oas2

        appliesTo:
          type: string
          description: Context or area to which the ruleset applies.
          enum:
            - API_METADATA
            - API_DEFINITION
            - DOCUMENTATION
          example: API_DEFINITION
        documentationLink:
          type: string
          description: URL to the documentation related to the ruleset.
          example: "https://example.com/docs/api-security-ruleset"
        provider:
          type: string
          description: Entity or individual providing the ruleset.
          example: "TechWave"
        isDefault:
          type: boolean
          default: false
          description: Whether the ruleset is a default one or not.
          example: true
        createdBy:
          type: string
          description: Identifier of the user who created the ruleset.
          readOnly: true
          example: "admin@gmail.com"
        createdTime:
          type: string
          description: Timestamp when the ruleset was created.
          readOnly: true
          example: "2024-08-01T12:00:00Z"
        updatedBy:
          type: string
          description: Identifier of the user who last updated the ruleset.
          readOnly: true
          example: "admin@gmail.com"
        updatedTime:
          type: string
          description: Timestamp when the ruleset was last updated.
          readOnly: true
          example: "2024-08-10T12:00:00Z"
      required:
        - name
        - rulesetContent
        - appliesTo
        - provider
    RulesetInfo:
      type: object
      description: Detailed information about a ruleset.
      properties:
        id:
          type: string
          description: UUID of the ruleset.
          readOnly: true
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Name of the ruleset.
          example: "API Security Ruleset"
        description:
          type: string
          description: A brief description of the ruleset.
          example: "A ruleset designed to enforce security standards for APIs."
        appliesTo:
          type: string
          description: Context or area to which the ruleset applies.
          enum:
            - API_METADATA
            - API_DEFINITION
            - DOCUMENTATION
          example: API_DEFINITION
        documentationLink:
          type: string
          description: URL to the documentation related to the ruleset.
          example: "https://example.com/docs/api-security-ruleset"
        provider:
          type: string
          description: Entity or individual providing the ruleset.
          example: "TechWave"
        createdBy:
          type: string
          description: Identifier of the user who created the ruleset.
          readOnly: true
          example: "admin@gmail.com"
        createdTime:
          type: string
          description: Timestamp when the ruleset was created.
          readOnly: true
          example: "2024-08-01T12:00:00Z"
        updatedBy:
          type: string
          description: Identifier of the user who last updated the ruleset.
          readOnly: true
          example: "admin@gmail.com"
        updatedTime:
          type: string
          description: Timestamp when the ruleset was last updated.
          readOnly: true
          example: "2024-08-02T12:00:00Z"
        isDefault:
          type: boolean
          default: false
          description: Whether the ruleset is a default one or not.
          example: true
      required:
        - name
        - ruleset_file
        - appliesTo
        - provider
    Error:
      title: Error object returned with 4XX HTTP Status
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int64
        message:
          type: string
          description: Error message.
        description:
          type: string
          description: |
            A detail description about the error message.
    HealthzResponse:
      type: object
      properties:
        status:
          type: string
          example: Ok
    GovernancePolicyInfo:
      type: object
      description: Detailed information about a governance policy.
      properties:
        id:
          type: string
          description: UUID of the governance policy.
          readOnly: true
          example: "987e6543-d21b-34d5-b678-912345678900"
        name:
          type: string
          description: Name of the governance policy.
          example: "API Security Policy"
        description:
          type: string
          description: A brief description of the governance policy.
          example: "Policy for enforcing security standards across all APIs."
        rulesets:
          type: array
          description: List of rulesets associated with the governance policy.
          items:
            $ref: '#/components/schemas/RulesetInfo'
        labels:
          type: array
          description: Labels associated with the governance policy.
          items:
            type: string
          example:
            - "security"
        createdBy:
          type: string
          description: Identifier of the user who created the governance policy.
          readOnly: true
          example: "admin@gmail.com"
        createdTime:
          type: string
          description: Timestamp when the governance policy was created.
          readOnly: true
          example: "2024-08-01T12:00:00Z"
        updatedBy:
          type: string
          description: Identifier of the user who last updated the governance policy.
          readOnly: true
          example: "admin@gmail.com"
        updatedTime:
          type: string
          description: Timestamp when the governance policy was last updated.
          readOnly: true
          example: "2024-08-02T12:00:00Z"
      required:
        - name
        - rulesets
    GovernancePolicyInfoWithRulesetIds:
      type: object
      description: Governance policy information with ruleset IDs.
      properties:
        id:
          type: string
          description: UUID of the governance policy.
          readOnly: true
          example: "987e6543-d21b-34d5-b678-912345678900"
        name:
          type: string
          description: Name of the governance policy.
          example: "API Security Policy"
        description:
          type: string
          description: A brief description of the governance policy.
          example: "Policy for enforcing security standards across all APIs."
        rulesets:
          type: array
          description: List of ruleset IDs the governance policy.
          items:
            $ref: '#/components/schemas/RulesetId'
        labels:
          type: array
          description: Labels or tags associated with the governance policy.
          items:
            type: string
          example:
            - "security"
        createdBy:
          type: string
          description: Identifier of the user who created the governance policy.
          readOnly: true
          example: "admin@gmail.com"
        createdTime:
          type: string
          description: Timestamp when the governance policy was created.
          readOnly: true
          example: "2024-08-01T12:00:00Z"
        updatedBy:
          type: string
          description: Identifier of the user who last updated the governance policy.
          readOnly: true
          example: "admin@gmail.com"
        updatedTime:
          type: string
          description: Timestamp when the governance policy was last updated.
          readOnly: true
          example: "2024-08-02T12:00:00Z"
      required:
        - name
        - rulesetIds
    RulesetId:
      type: object
      description: Ruleset Id information.
      properties:
        id:
          type: string
          description: UUID of the ruleset.
          example: "987e6543-d21b-34d5-b678-912345678900"
    GovernancePolicyList:
      type: object
      description: A list of governance policies.
      properties:
        count:
          type: integer
          description: Number of governance policies returned.
          example: 10
        list:
          type: array
          description: List of governance policies.
          items:
            $ref: '#/components/schemas/GovernancePolicyInfo'
    AssessAPIComplianceRequest:
      type: object
      description: Request object for assessing compliance of an api.
      properties:
        labels:
          type: array
          description: Labels associated with the api.
          items:
            type: string
          example:
            - "security"
  #####
  # TODO: Fix scope validation logic. Currently scope validation is broken due to logic in apimgt.rest.api.common.RestAPICommonUtil
  #####
  securitySchemes:
    OAuth2Security:
      type: oauth2
      flows:
        password:
          tokenUrl: https://localhost:9443/oauth2/token
          scopes:
            openid: Authorize access to user details
            apim:gov_rule_read: Read governance rulesets
            apim:gov_rule_manage: Manage governance rulesets
            apim:gov_policy_read: Read governance policies
            apim:gov_policy_manage: Manage governance policies
            apim:gov_compliance_manage: Manage governance compliance tasks