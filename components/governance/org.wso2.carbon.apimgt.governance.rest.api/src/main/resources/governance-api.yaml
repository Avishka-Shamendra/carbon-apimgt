# Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
#
# WSO2 LLC. licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License
################################################################################
openapi: 3.0.1
info:
  version: v0.1
  title: WSO2 API Manager - Governance
  description: |
    This document specifies a **RESTful API** for WSO2 **API Manager** - Governance.
  contact:
    name: WSO2
    url: http://wso2.com/products/api-manager/
    email: architecture@wso2.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://apis.wso2.com/api/am/governance/v0
tags:
  - name: Rules
    description: API for managing rules.
  - name: Governance Policies
    description: API for managing governance policies.
  - name: Governance Results
    description: API for accessing governance results.
  - name: Health Check
    description: API for health check.
  - name: Deprecated
    description: API resources that are deprecated.
paths:
  /rules:
    get:
      summary: Retrieves a list of rules.
      description: Returns a list of all rules associated with the requested organization.
      operationId: getRules
      tags:
        - Rules
      responses:
        "200":
          description: OK. Successful response with a list of rules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulesList'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_rule_read
    post:
      summary: Create a new rule.
      description: Creates a new rule in the user's organization.
      operationId: createRule
      tags:
        - Rules
      requestBody:
        required: true
        description: JSON object containing the details of the new rule.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
      responses:
        "201":
          description: OK. Rule created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleInfo'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_rule_manage
  /rules/{ruleId}:
    get:
      summary: Retrieves a rule by ID.
      description: Returns detailed information about a rule.
      operationId: getRuleById
      tags:
        - Rules
      parameters:
        - name: ruleId
          in: path
          description: ID of the rule to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK. Successful response with the rule details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Rule not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_rule_read
    put:
      summary: Update a rule by ID.
      description: Updates the details of a rule.
      operationId: updateRuleById
      tags:
        - Rules
      parameters:
        - name: ruleId
          in: path
          description: ID of the rule to update.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: JSON object containing the updated details of the rule.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
      responses:
        "200":
          description: OK. Rule updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleInfo'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Rule not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_rule_manage
    delete:
      summary: Delete a rule by ID.
      description: Deletes a rule from the user's organization.
      operationId: deleteRuleById
      tags:
        - Rules
      parameters:
        - name: ruleId
          in: path
          description: ID of the rule to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Rule deleted successfully.
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Rule not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_rule_manage
  /rules/{ruleId}/usage:
    get:
      summary: Retrieves usage of each rule.
      description: Retrieves the list of policies which use the rule.
      operationId: getRuleUsage
      tags:
        - Rules
      parameters:
        - name: ruleId
          in: path
          required: true
          description: UUID of the rule.
          schema:
            type: string
      responses:
        "200":
          description: OK. Rule usage retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_rule_read

  /healthz/liveness:
    get:
      summary: Liveness Check
      description: Checks if the application is alive and able to respond to requests.
      operationId: getHealthzLiveness
      tags:
        - Health Check
      responses:
        "200":
          description: Application is alive
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthzResponse"
  /healthz/readiness:
    get:
      summary: Readiness Check
      description: Checks if the application is ready to handle requests.
      operationId: getHealthzReadiness
      tags:
        - Health Check
      responses:
        "200":
          description: Application is ready
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthzResponse"

  /governance-policies:
    get:
      summary: Retrieves a list of all governance policies.
      description: Retrieves a list of governance policies for the user's organization.
      operationId: getGovernancePolicies
      tags:
        - Governance Policies
      responses:
        "200":
          description: OK. Successful response with a list of governance policies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GovernancePolicyList'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_policy_read
    post:
      summary: Creates a new governance policy.
      description: Creates a new governance policy for the user's organization.
      operationId: createGovernancePolicy
      tags:
        - Governance Policies
      requestBody:
        required: true
        description: JSON object containing the details of the new governance policy.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GovernancePolicy'
      responses:
        "201":
          description: OK. Governance policy created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GovernancePolicy'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_policy_manage
  /governance-policies/{policyId}:
    get:
      summary: Get a specific governance policy
      description: Retrieves details of a specific governance policy identified by the policyId.
      operationId: getGovernancePolicyById
      tags:
        - Governance Policies
      parameters:
        - name: policyId
          in: path
          required: true
          description: UUID of the governance policy.
          schema:
            type: string
      responses:
        "200":
          description: OK. Governance policy details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GovernancePolicy'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_policy_read
    put:
      summary: Update a specific governance policy
      description: Updates the details of an existing governance policy identified by the policyId.
      operationId: updateGovernancePolicyById
      tags:
        - Governance Policies
      parameters:
        - name: policyId
          in: path
          required: true
          description: UUID of the governance policy.
          schema:
            type: string
      requestBody:
        required: true
        description: JSON object containing the updated governance policy details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GovernancePolicy'
      responses:
        "200":
          description: OK. Governance policy updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GovernancePolicy'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_policy_manage
    delete:
      summary: Delete a specific governance policy
      description: Deletes an existing governance policy identified by the policyId.
      operationId: deleteGovernancePolicy
      tags:
        - Governance Policies
      parameters:
        - name: policyId
          in: path
          required: true
          description: UUID of the governance policy.
          schema:
            type: string
      responses:
        '204':
          description: OK. Governance policy deleted successfully.
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_policy_manage
  /artifact-governance-results:
    get:
      summary: Retrieves governance results of all artifacts
      description: Retrieves governance results of all artifacts in the organization.
      operationId: getGovernanceResultsForAllArtifacts
      tags:
        - Governance Results
      responses:
        "200":
          description: OK. Successful response with governance results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactGovernanceResults'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_result_read
  /artifact-governance-results/{artifactId}:
    get:
      summary: Retrieve governance results for a specific artifact
      description: Retrieve governance results associated with a specific artifact including APIs within the organization using its unique ID.
      operationId: getGovernanceResultsByArtifactId
      tags:
        - Governance Results

      parameters:
        - name: artifactId
          in: path
          required: true
          description: The unique identifier of the artifact/api.
          schema:
            type: string
      responses:
        "200":
          description: Successful response with governance results for the specified artifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactGovernanceResult'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_result_read
  /policy-governance-results:
    get:
      summary: Retrieve governance results for all policies
      description: Retrieve governance results of all governance policies within the organization.
      operationId: getGovernanceResultsForAllPolicies
      tags:
        - Governance Results
      responses:
        "200":
          description: Successful response with governance results for the specified policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyGovernanceResults'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_result_read
  /policy-governance-results/{policyId}:
    get:
      summary: Retrieve governance results for a specific policy
      description: Retrieve governance results associated with a specific governance policy within the organization using its unique ID.
      operationId: getGovernanceResultsByPolicyId
      tags:
        - Governance Results

      parameters:
        - name: policyId
          in: path
          required: true
          description: The unique identifier of the governance policy.
          schema:
            type: string
      responses:
        "200":
          description: Successful response with governance results for the specified policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyGovernanceResult'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - OAuth2Security:
            - apim:gov_result_read

components:
  schemas:
    Error:
      title: Error object returned by the API
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int64
        message:
          type: string
          description: Error message.
        description:
          type: string
          description: |
            A detail description about the error message.
    HealthzResponse:
      type: object
      properties:
        status:
          type: string
          example: Ok
    RulesList:
      type: object
      description: A list of rules.
      properties:
        count:
          type: integer
          description: Number of rules returned.
          example: 2
        list:
          type: array
          description: List of rules.
          items:
            $ref: '#/components/schemas/RuleInfo'
    Rule:
      type: object
      description: Detailed information about a rule.
      properties:
        id:
          type: string
          description: UUID of the rule.
          readOnly: true
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Name of the rule.
          example: "API Name Rule"
        description:
          type: string
          description: A brief description of the rule.
          example: "A rule designed to enforce API name length"
        appliesTo:
          type: string
          description: Context or area to which the rule applies.
          enum:
            - API_METADATA
            - API_DEFINITION
            - DOCUMENTATION
          example: API_DEFINITION
        pathList:
          type: array
          description: List of json paths to which the rule applies.
          items:
            type: string
            example: "$.info.title"
        ruleContent:
          type: array
          description: List of functions and parameters that define the rule.
          items:
            $ref: '#/components/schemas/RuleContent'
        severity:
          type: string
          description: Severity level of the rule.
          enum:
            - ERROR
            - WARNING
            - INFORMATION
          example: WARNING
        message:
          type: string
          description: Message to be displayed when the rule is violated.
          example: "API name can not be too long or short"
        provider:
          type: string
          description: Entity or individual providing the rule.
          example: "TechWave"
        createdBy:
          type: string
          description: Identifier of the user who created the rule.
          readOnly: true
          example: "admin@wso2.com"
        createdTime:
          type: string
          description: Timestamp when the rule was created.
          readOnly: true
          example: "2024-08-01T12:00:00Z"
        updatedBy:
          type: string
          description: Identifier of the user who last updated the rule.
          readOnly: true
          example: "admin@wso2.com"
        updatedTime:
          type: string
          description: Timestamp when the rule was last updated.
          readOnly: true
          example: "2024-08-10T12:00:00Z"
      required:
        - name
        - appliesTo
        - pathList
        - ruleContent
        - severity
    RuleContent:
      type: object
      properties:
        function:
          type: string
          description: Name of the function.
          example: "lengthInBetween"
        parameters:
          type: object
          description: Key-value parameters for the function.
          additionalProperties:
            type: object
          example:
            min: 10
            max: 20
    RuleList:
      type: object
      description: A list of rules.
      properties:
        count:
          type: integer
          description: Number of rules returned.
          example: 2
        list:
          type: array
          description: List of rules.
          items:
            $ref: '#/components/schemas/RuleInfo'
    RuleInfo:
      type: object
      description: Summary information about a rule.
      properties:
        id:
          type: string
          description: UUID of the rule.
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Name of the rule.
          example: "API Name Rule"
        description:
          type: string
          description: A brief description of the rule.
          example: "A rule designed to enforce API name length"
        provider:
          type: string
          description: Entity or individual providing the rule.
          example: "TechWave"
        appliesTo:
          type: string
          description: Context or area to which the rule applies.
          enum:
            - API_METADATA
            - API_DEFINITION
            - DOCUMENTATION
          example: API_DEFINITION
        pathList:
          type: array
          description: List of json paths to which the rule applies.
          items:
            type: string
            example: "$.info.title"
        severity:
          type: string
          description: Severity level of the rule.
          enum:
            - ERROR
            - WARNING
            - INFORMATION
          example: WARNING
    GovernancePolicyList:
      type: object
      description: A list of governance policies.
      properties:
        count:
          type: integer
          description: Number of governance policies returned.
          example: 10
        list:
          type: array
          description: List of governance policies.
          items:
            $ref: '#/components/schemas/GovernancePolicy'
    GovernancePolicy:
      type: object
      description: Detailed information about a governance policy.
      properties:
        id:
          type: string
          description: UUID of the governance policy.
          readOnly: true
          example: "987e6543-d21b-34d5-b678-912345678900"
        name:
          type: string
          description: Name of the governance policy.
          example: "API Security Policy"
        description:
          type: string
          description: A brief description of the governance policy.
          example: "Policy for enforcing security standards across all APIs."
        applicableArtifactTypes:
          type: array
          description: List of artifact types to which the governance policy applies.
          items:
            type: string
            description: The type of artifacts to which the governance policy applies.
            enum:
              - REST_API
              - SOAP_API
              - GRAPHQL_API
              - ASYNC_API
            example: "REST_API"
        applicableStates:
          type: array
          description: List of states at which the governance policy should be enforced.
          items:
            type: string
            description: The life cycle state at which an governance policy should be enforced.
            enum:
              - API_CREATION
              - API_DEPLOYMENT
              - API_PUBLICATION
            example: "API_DEPLOYMENT"
        actionOnViolation:
          type: string
          description: Action to be taken when the governance policy is violated.
          enum:
            - BLOCK
            - WARN
          example: "BLOCK"
        rules:
          type: array
          description: List of rules associated with the governance policy.
          items:
            type: string
        labels:
          type: array
          description: Labels associated with the governance policy.
          items:
            type: string
          example:
            - "security"
        createdBy:
          type: string
          description: Identifier of the user who created the governance policy.
          readOnly: true
          example: "admin@wso2.com"
        createdTime:
          type: string
          description: Timestamp when the governance policy was created.
          readOnly: true
          example: "2024-08-01T12:00:00Z"
        updatedBy:
          type: string
          description: Identifier of the user who last updated the governance policy.
          readOnly: true
          example: "admin@wso2.com"
        updatedTime:
          type: string
          description: Timestamp when the governance policy was last updated.
          readOnly: true
          example: "2024-08-02T12:00:00Z"
      required:
        - name
        - rules
        - type

    ArtifactGovernanceResults:
      type: object
      description: Governance results of all artifacts of an organization.
      properties:
        artifactGovernanceSummary:
          $ref: '#/components/schemas/GovernanceSummaryForArtifacts'
        artifactGovernanceResults:
          type: array
          description: Governance results for a list of artifacts.
          items:
            $ref: '#/components/schemas/ArtifactGovernanceResultInfo'
    PolicyGovernanceResults:
      type: object
      description: Governance results of all policies of an organization.
      properties:
        policyGovernanceSummary:
          $ref: '#/components/schemas/GovernanceSummaryForPolicies'
        policyGovernanceResults:
          type: array
          description: Governance results for a list of policies.
          items:
            $ref: '#/components/schemas/PolicyGovernanceResultInfo'
    GovernanceSummaryForPolicies:
      type: object
      description: Summary of governance policy compliance.
      properties:
        total:
          type: integer
          description: Total number of policies.
          example: 10
        followed:
          type: integer
          description: Number of policies followed to.
          example: 6
        violated:
          type: integer
          description: Number of policies violated.
          example: 4
        unapplied:
          type: integer
          description: Number of policies unapplied.
          example: 0
    GovernanceSummaryForArtifacts:
      type: object
      description: Summary of artifact compliance status.
      properties:
        total:
          type: integer
          description: Total number of artifacts.
          example: 10
        compliant:
          type: integer
          description: Number of compliant artifacts.
          example: 6
        nonCompliant:
          type: integer
          description: Number of non-compliant artifacts.
          example: 4
        notApplicable:
          type: integer
          description: Number of artifacts not applicable.
          example: 0
    ArtifactGovernanceResultInfo:
      type: object
      description: Provides governance results of an artifact.
      properties:
        artifactId:
          type: string
          description: UUID of the artifact.
          example: "123e4567-e89b-12d3-a456-426614174000"
        artifactName:
          type: string
          description: Name of the artifact.
          example: "API1"
        status:
          type: string
          description: Status of the artifact's governance compliance.
          enum:
            - COMPLAINT
            - NON-COMPLAINT
            - NOT-APPLICABLE
          example: "COMPLAINT"
    PolicyGovernanceResultInfo:
      type: object
      description: Provides governance results of a policy.
      properties:
        policyId:
          type: string
          description: UUID of the policy.
          example: "123e4567-e89b-12d3-a456-426614174000"
        policyName:
          type: string
          description: Name of the policy.
          example: "Policy1"
        status:
          type: string
          description: Status of the policy's governance compliance.
          enum:
            - FOLLOWED
            - VIOLATED
            - UNAPPLIED
          example: "FOLLOWED"
    ArtifactGovernanceResult:
      type: object
      description: Provides governance results of an artifact.
      properties:
        artifactId:
          type: string
          description: UUID of the artifact.
          example: "123e4567-e89b-12d3-a456-426614174000"
        artifactName:
          type: string
          description: Name of the artifact.
          example: "API1"
        status:
          type: string
          description: Status of the artifact's governance compliance.
          enum:
            - COMPLAINT
            - NON-COMPLAINT
            - NOT-APPLICABLE
          example: "COMPLAINT"
        ruleValidationResults:
          type: array
          description: List of rule validation information.
          items:
            $ref: '#/components/schemas/RuleValidationResult'
    PolicyGovernanceResult:
      type: object
      description: Provides governance results of a policy.
      properties:
        policyId:
          type: string
          description: UUID of the policy.
          example: "123e4567-e89b-12d3-a456-426614174000"
        policyName:
          type: string
          description: Name of the policy.
          example: "Policy1"
        status:
          type: string
          description: Status of the policy's governance compliance.
          enum:
            - FOLLOWED
            - VIOLATED
            - UNAPPLIED
          example: "FOLLOWED"
        governedArtifacts:
          type: array
          description: Governance results of the artifacts attached to the policy.
          items:
            type: object
            properties:
              artifactId:
                type: string
                description: UUID of the artifact.
                example: "123e4567-e89b-12d3-a456-426614174000"
              artifactName:
                type: string
                description: Name of the artifact.
                example: "API1"
              status:
                type: string
                description: Status of the artifact's governance compliance.
                enum:
                  - COMPLAINT
                  - NON-COMPLAINT
                  - NOT-APPLICABLE
                example: "COMPLAINT"
    RuleValidationResult:
      type: object
      description: Result of the rule validation.
      properties:
        id:
          type: string
          description: UUID of the rule.
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Name of the rule.
          example: "API Name Rule"
        status:
          type: string
          description: Status of the rule validation.
          enum:
            - SUCCESSFUL
            - FAILED
          example: "FAILED"
        severity:
          type: string
          description: Severity level of the rule violation.
          enum:
            - ERROR
            - WARNING
            - INFORMATION
          example: WARNING
        violatedPaths:
          type: array
          description: List of paths that violate the rule.
          items:
            type: string
            example: "$.info.title"
        message:
          type: string
          description: Message to be displayed when the rule is violated.
          example: "API name can not be too long or short"
  securitySchemes:
    OAuth2Security:
      type: oauth2
      flows:
        password:
          tokenUrl: https://localhost:9443/oauth2/token
          scopes:
            openid: Authorize access to user details
            apim:gov_rule_read: Read governance rules
            apim:gov_rule_manage: Manage governance rules
            apim:gov_policy_read: Read governance policies
            apim:gov_policy_manage: Manage governance policies
            apim:gov_result_read: Read governance results